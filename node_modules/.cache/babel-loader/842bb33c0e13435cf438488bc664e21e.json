{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\"; //cartIsvisible\n\nconst initialisShownState = {\n  isshow: false\n};\nconst isshownSlice = createSlice({\n  name: \"isshownSlice\",\n  initialState: initialisShownState,\n  reducers: {\n    toggle(state) {\n      state.isshow = !state.isshow;\n    }\n\n  }\n}); //cartSLice\n\nconst cartSlice = createSlice({\n  name: \"cartSlice\",\n  //totalAmount here can be omitted  since the initial state is 0\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    totalAmount: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find(item => item.id === newItem.id); // no matter if the item is already in the cart or not, the total quantity should be added one\n\n      stat;\n      e;\n\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n\n    removeItemToCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    isshown: isshownSlice.reducer,\n    cart: cartSlice.reducer\n  }\n});\nexport const isshownActions = isshownSlice.actions;\nexport const cartActions = cartSlice.actions;\nexport default store;","map":{"version":3,"sources":["/Users/skyezhang/Downloads/ReduxCart/src/store/index.js"],"names":["createStore","createSlice","configureStore","initialisShownState","isshow","isshownSlice","name","initialState","reducers","toggle","state","cartSlice","items","totalQuantity","totalAmount","addItemToCart","action","newItem","payload","existingItem","find","item","id","stat","e","push","itemId","price","quantity","totalPrice","title","removeItemToCart","filter","store","reducer","isshown","cart","isshownActions","actions","cartActions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C,C,CACA;;AACA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA5B;AACA,MAAMC,YAAY,GAAGJ,WAAW,CAAC;AAC/BK,EAAAA,IAAI,EAAE,cADyB;AAE/BC,EAAAA,YAAY,EAAEJ,mBAFiB;AAG/BK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,CAACC,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACN,MAAN,GAAe,CAACM,KAAK,CAACN,MAAtB;AACD;;AAHO;AAHqB,CAAD,CAAhC,C,CASA;;AACA,MAAMO,SAAS,GAAGV,WAAW,CAAC;AAC5BK,EAAAA,IAAI,EAAE,WADsB;AAE5B;AACAC,EAAAA,YAAY,EAAE;AAAEK,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,aAAa,EAAE,CAA5B;AAA+BC,IAAAA,WAAW,EAAE;AAA5C,GAHc;AAI5BN,EAAAA,QAAQ,EAAE;AACRO,IAAAA,aAAa,CAACL,KAAD,EAAQM,MAAR,EAAgB;AAC3B,YAAMC,OAAO,GAAGD,MAAM,CAACE,OAAvB;AACA,YAAMC,YAAY,GAAGT,KAAK,CAACE,KAAN,CAAYQ,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYL,OAAO,CAACK,EAA/C,CAArB,CAF2B,CAG3B;;AACAC,MAAAA,IAAI;AAACC,MAAAA,CAAC;;AACN,UAAI,CAACL,YAAL,EAAmB;AACjBT,QAAAA,KAAK,CAACE,KAAN,CAAYa,IAAZ,CAAiB;AACfC,UAAAA,MAAM,EAAET,OAAO,CAACK,EADD;AAEfK,UAAAA,KAAK,EAAEV,OAAO,CAACU,KAFA;AAGfC,UAAAA,QAAQ,EAAE,CAHK;AAIfC,UAAAA,UAAU,EAAEZ,OAAO,CAACU,KAJL;AAKfrB,UAAAA,IAAI,EAAEW,OAAO,CAACa;AALC,SAAjB;AAOD,OARD,MAQO;AACLX,QAAAA,YAAY,CAACS,QAAb;AACAT,QAAAA,YAAY,CAACU,UAAb,GAA0BV,YAAY,CAACU,UAAb,GAA0BZ,OAAO,CAACU,KAA5D;AACD;AACF,KAlBO;;AAmBRI,IAAAA,gBAAgB,CAACrB,KAAD,EAAQM,MAAR,EAAgB;AAC9B,YAAMM,EAAE,GAAGN,MAAM,CAACE,OAAlB;AACA,YAAMC,YAAY,GAAGT,KAAK,CAACE,KAAN,CAAYQ,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAvC,CAArB;;AACA,UAAIH,YAAY,CAACS,QAAb,KAA0B,CAA9B,EAAiC;AAC/BlB,QAAAA,KAAK,CAACE,KAAN,GAAcF,KAAK,CAACE,KAAN,CAAYoB,MAAZ,CAAoBX,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAzC,CAAd;AACD,OAFD,MAEO;AACLH,QAAAA,YAAY,CAACS,QAAb;AACAT,QAAAA,YAAY,CAACU,UAAb,GAA0BV,YAAY,CAACU,UAAb,GAA0BV,YAAY,CAACQ,KAAjE;AACD;AACF;;AA5BO;AAJkB,CAAD,CAA7B;AAoCA,MAAMM,KAAK,GAAG/B,cAAc,CAAC;AAC3BgC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,OAAO,EAAE9B,YAAY,CAAC6B,OAAxB;AAAiCE,IAAAA,IAAI,EAAEzB,SAAS,CAACuB;AAAjD;AADkB,CAAD,CAA5B;AAIA,OAAO,MAAMG,cAAc,GAAGhC,YAAY,CAACiC,OAApC;AACP,OAAO,MAAMC,WAAW,GAAG5B,SAAS,CAAC2B,OAA9B;AAEP,eAAeL,KAAf","sourcesContent":["import { createStore } from \"redux\";\n\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n//cartIsvisible\nconst initialisShownState = { isshow: false };\nconst isshownSlice = createSlice({\n  name: \"isshownSlice\",\n  initialState: initialisShownState,\n  reducers: {\n    toggle(state) {\n      state.isshow = !state.isshow;\n    },\n  },\n});\n//cartSLice\nconst cartSlice = createSlice({\n  name: \"cartSlice\",\n  //totalAmount here can be omitted  since the initial state is 0\n  initialState: { items: [], totalQuantity: 0, totalAmount: 0 },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n      // no matter if the item is already in the cart or not, the total quantity should be added one\n      stat;e\n      if (!existingItem) {\n        state.items.push({\n          itemId: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title,\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemToCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n  },\n});\n\nconst store = configureStore({\n  reducer: { isshown: isshownSlice.reducer, cart: cartSlice.reducer },\n});\n\nexport const isshownActions = isshownSlice.actions;\nexport const cartActions = cartSlice.actions;\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}